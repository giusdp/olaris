# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'
vars:
  DRY: false
  MAX: 100
  TIMEOUT: 5

env:
  KUBECONFIG: 
    sh: -|
         if test -e ~/.nuv/kubeconfig
         then echo  ~/.nuv/kubeconfig
         else echo ~/.kube/config
         fi


tasks:

  status:
    desc: show nuvolaris cluster status 
    silent: true
    cmds:
    - echo "*** Deployment ***"
    - kubectl -n nuvolaris get no,sts,po,svc

  watch:
    desc: watch pod deployment
    silent: true
    cmds: 
    - watch kubectl -n nuvolaris get po

  prepare:
    desc: prepare the environment
    silent: true
    cmds:
    - |
      if {{.DRY}}
      then cat common/*.yaml roles/*.yaml crds/*.yaml
      else kubectl apply  -f common -f roles -f crds
      fi

  wait:
    desc: wait for cluster ready
    silent: true
    cmds:
    - |
      echo "Waiting for {{.OBJECT}}"
      while ! kubectl -n nuvolaris get {{.OBJECT}} 2>/dev/null
      do sleep {{.TIMEOUT}}
      done
    - |
      N=0
      RES=false
      while [[ $N -lt {{.MAX}} ]]
      do 
          N=$((N + 1))
          echo "$N Waiting for {{.OBJECT}} ready"
          if kubectl -n nuvolaris wait --for=condition=ready {{.OBJECT}} --timeout={{.TIMEOUT}}s 2>/dev/null
          then 
                RES=true
                break
          fi
      done
      $RES

  operator:
    desc: deploy operator
    silent: true
    cmds:
    - envsubst -i operator.yaml -o _operator.yaml
    - |
      if {{.DRY}}
      then cat _operator.yaml
      else kubectl apply -f _operator.yaml
      fi
    - task: wait 
      vars:
        OBJECT: pod/nuvolaris-operator

  instance:
    desc: deploy instance
    silent: true
    cmds:
    - envsubst -i whisk.yaml -o _whisk.yaml
    - |
      if {{.DRY}}
      then cat _whisk.yaml
      else kubectl apply -f _whisk.yaml
      fi
    - task: wait 
      vars:
        OBJECT: pod/couchdb-0
    - task: wait
      vars:
        OBJECT: pod/controller-0

  create:
    desc: prepare+operator+instance
    silent: true
    cmds:
    - task: prepare
    - task: operator
    - task: instance
  
  delete:
    silent: true
    desc: delete cluster
    cmds:
    - kubectl -n nuvolaris delete wsk/controller
    - kubectl -n nuvolaris delete all --all
    - kubectl -n nuvolaris delete pvc --all
    - kubectl delete ns nuvolaris
    - rm -f ../_kubenv

  detect:
    desc: detect kind
    silent: true
    cmds: 
    - |-
      LABELS="$(kubectl get nodes -ojsonpath='{.items[].metadata.labels}' 2>/dev/null)"
      if echo "$LABELS" | jq . | grep eksctl.io >/dev/null
      then echo "eks"
      elif echo "$LABELS" | jq . | grep microk8s.io >/dev/null
      then echo "microk8s"
      elif echo "$LABELS" | jq . | grep lke.linode.com >/dev/null
      then echo "lks"
      elif echo "$LABELS" | jq . | grep openshift.io >/dev/null
      then echo "openshift"
      elif echo "$LABELS" | jq . | grep 'instance-type.*k3s' >/dev/null
      then echo "k3s"
      elif echo "$LABELS" | jq . | awk '/nuvolaris.io\/kube/ {print $2}' | grep kind >/dev/null
      then echo "kind"
      else echo "generic"
      fi

