# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

version: '3'

vars:
  D: ""
  RUN: '{{if eq .D ""}}{{else}}echo RUN:{{end}}'
  CAT: '{{if eq .D ""}}true{{else}}cat{{end}}'
  RETRY: 100
  TIMEOUT: 10
  ETC: 
    sh: if $WSK_INSECURE ; then echo "-i" ; else echo "" ; fi

env:
  KUBECONFIG: 
    sh: | 
        if test -e $NUV_TMP/kubeconfig
        then echo  $NUV_TMP/kubeconfig
        else echo ~/.kube/config
        fi

tasks:

  wait:
    #desc: wait for apihost available
    silent: true
    cmds:
    - |
      N=0
      while true
      do
        APIHOST="$(kubectl -n nuvolaris get cm/config -o jsonpath='{.metadata.annotations.apihost}')"
        HOST="$(echo $APIHOST | awk -F: '{print $2}')"
        if [[ "$APIHOST" != "" ]] && [[ "$HOST" != "//pending" ]]
        then break
        fi
        echo "$((N++))... waiting for APIHOST ready"
        sleep 5
      done
      echo $APIHOST

  config:
    #desc: configuring nuvolaris
    silent: true
    cmds:
    - | 
      APIHOST=$(kubectl -n nuvolaris get cm/config -o jsonpath='{.metadata.annotations.apihost}')
      AUTH=$(kubectl -n nuvolaris get wsk/controller -ojsonpath='{.spec.openwhisk.namespaces.nuvolaris}')
      retry -t 100 -m 600 nuv -wsk {{.ETC}} --apihost "$APIHOST" --auth "$AUTH" namespace list
      {{.RUN}} wsk  property set --apihost "$APIHOST"  --auth "$AUTH"

  login:
    silent: true
    desc: configuring nuvolaris
    cmds:
    - task: wait
    - task: config
    - task: hello

  hello:
    silent: true
    desc: executing an hello world action
    cmds:
    - wsk {{.ETC}} package update hello
    - wsk {{.ETC}} action update hello/hello hello.js
    - wsk {{.ETC}} action invoke hello/hello -p name Nuvolaris -r | grep Nuvolaris

  status:
    silent: true
    desc: showing the configuration status
    cmds:
    - wsk {{.ETC}} property get --apihost

  delete:
    desc: no-op delete command